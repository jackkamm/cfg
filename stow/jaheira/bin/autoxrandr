#!/usr/bin/env python3
import subprocess as sub
import argparse
import math
import re
import itertools


def run(cmd, *args, **kwargs):
    print(*cmd)
    sub.run(cmd, *args, **kwargs)


def configure_outputs(outputs, primary, scale):
    for o in outputs:
        if o["modes"]:
            if not primary:
                primary = o["name"]
            if primary == o["name"]:
                primary_x, primary_y = o["modes"][0]
                break

    try:
        primary_x
    except NameError:
        raise ValueError("Couldn't find primary output")

    run(["xrandr", "--output", primary, "--primary",
         "--mode", f"{primary_x}x{primary_y}", "--pos", "0x0",
         "--rotate", "normal"])

    for o in outputs:
        if o["name"] != primary and o["modes"]:
            x, y = o["modes"][0]
            scale_x = math.ceil(scale*x)
            scale_y = math.ceil(scale*y)
            cmd = [
                "xrandr", "--output", o["name"],
                "--mode", f"{x}x{y}",
                "--panning", f"{scale_x}x{scale_y}+{primary_x}+0",
                "--scale", f"{scale}x{scale}",
                "--right-of", primary]
            run(cmd)
        elif not o["modes"]:
            cmd = ["xrandr", "--output", o["name"], "--off"]
            run(cmd)


def get_outputs():
    lines = sub.run(
        ["xrandr"], stdout=sub.PIPE,
        universal_newlines=True).stdout.split("\n")

    output_re = re.compile(r"(\S+)\s+(dis)?connected")
    mode_re = re.compile(r"\s*(\d+)x(\d+)\s+")
    outputs = []

    lines = list(reversed(lines))
    while lines:
        l = lines.pop()
        output_match = output_re.match(l)
        if output_match:
            curr_output = {}
            outputs.append(curr_output)
            curr_output["name"] = output_match.group(1)
            curr_output["modes"] = []
            while lines:
                l = lines.pop()
                mode_match = mode_re.match(l)
                if not mode_match:
                    lines.append(l)
                    break
                curr_output["modes"].append((int(mode_match.group(1)),
                                             int(mode_match.group(2))))
    return outputs


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--primary", default=None)
    parser.add_argument("--scale", type=float, default=1)
    args = parser.parse_args()

    outputs = get_outputs()
    configure_outputs(outputs, args.primary, args.scale)
